AOP means Aspect Oriented Programming (AOP) compliments OOPs in the sense that it also provides modularity.
But the key unit of modularity is aspect than class.

AOP breaks the program logic into distinct parts (called concerns).
It is used to increase modularity by cross-cutting concerns.
such as transaction management,
        authentication,
        logging,
        security etc.

Join point - Join point is any point in your program such as method execution,
             exception handling, field access etc. Spring supports only method execution join point.

Advice - Advice represents an action taken by an aspect at a particular join point. There are different types of advices:

         Before Advice: it executes before a join point.
         After Returning Advice: it executes after a joint point completes normally.
         After Throwing Advice: it executes if method exits by throwing an exception.
         After (finally) Advice: it executes after a join point regardless of join point exit whether normally or exceptional return.
         Around Advice: It executes before and after a join point.

Pointcut - point is an expression predicates where our advice should execute/ It is an expression language of AOP that matches join points.
Introduction - It means introduction of additional method and fields for a type.
               It allows you to introduce new interface to any advised object.
Target Object - It is the object i.e. being advised by one or more aspects.
                It is also known as proxied object in spring because Spring AOP is implemented using runtime proxies.
Aspect - it is a class contains advices and join points.
Interceptor - It is an aspect that contains only one advice.
AOP Proxy -
Weaving - It is the process of linking aspect with other application types or objects to create an advised object.
          Weaving can be done at compile time, load time or runtime. Spring AOP performs weaving at runtime.

@Pointcut("execution(public * *(..))")
It will be applied on all the public methods.

@Pointcut("execution(public Operation.*(..))")
It will be applied on all the public methods of Operation class.

@Pointcut("execution(* Operation.*(..))")
It will be applied on all the methods of Operation class.

@Pointcut("execution(public Employee.set*(..))")
It will be applied on all the public setter methods of Employee class.

the execution of any public method:
execution(public * *(..))

the execution of any method with a name beginning with "set":
execution(* set*(..))

the execution of any method defined by the AccountService interface:
execution(* com.xyz.service.AccountService.*(..))

the execution of any method defined in the service package:
execution(* com.xyz.service.*.*(..))

the execution of any method defined in the service package or a sub-package:
execution(* com.xyz.service..*.*(..))

any join point (method execution only in Spring AOP) within the service package:
within(com.xyz.service.*)

any join point (method execution only in Spring AOP) within the service package or a sub-package:
within(com.xyz.service..*)

any join point (method execution only in Spring AOP) where the proxy implements the AccountService interface:
this(com.xyz.service.AccountService)

'this' is more commonly used in a binding form :- see the following section on advice for how to make the proxy object available in the advice body.
