1) Spring components
2) different Scopes
3) Bean lifeCycle
4) different type of ApplicationContext
5) prototype in singleton scope
6) Autowired
7) Autowired types
8) concurrent API
9) Try resource using autocloseable interface
10) Transactional
11) Import vs ComponentScan
12) Qualifier vs Primary
13)I believe @ElementCollection is mainly for mapping non-entities (embeddable or basic) while @OneToMany is used to map entities.
So which one to use depend on what you want to achieve.
14) @request param vs path variable
15)model vs modelmap vs modelattrubutes vs model and view -
   Model defines a holder for model attributes and is primarily designed for adding attributes to the model.
    example : model.addAttribute("message", message);

   ModelMap is an extension of Model with the ability to store attributes in a map and chain method calls.
   example :  map.addAttribute("message", message).addAttribute("time", time);

  ModelAndView is a holder for a model and a view; it allows to return both model and view in one return value
  example : var mav = new ModelAndView();

          mav.addObject("message", message);
          mav.setViewName("show");

          return mav;

   @modelAttribute to capture form parameters
   @RequestBody to capture entire request

16)valid vs validate

17) Important link : https://javahungry.blogspot.com/2020/10/java-interview-questions-for-2-years-experience.html

18) fibonacci vs factorial vs armstrong
19) sqrt number with sqrt function
20) subsetString
20) @async and @retryable should not be one class because these annotation will create proxy classes
21) concurrentmodificationException - it arises due to change in the size like add and remove operation list
    and map.remove operation will throw this exception
22) LongestRepeatingSequenceString
23) PermutationString

24)web.xml is also known as the Deployment Descriptor which has definitions of the servlets and their mappings, filters, and lifecycle listeners.
   It is also used for configuring the ContextLoaderListener. Whenever the application is deployed,
   a ContextLoaderListener instance is created by Servlet container which leads to a load of WebApplicationContext

25) very important : 52. Are singleton beans thread-safe?
                     No, the singleton beans are not thread-safe because the concept of thread-safety essentially deals with the execution of the program and the singleton is simply a design pattern meant for the creation of objects. Thread safety nature of a bean depends on the nature of its implementation.

                     53. How can you achieve thread-safety in beans?
                     The thread safety can be achieved by changing the scope of the bean to request, session or prototype but at the cost of performance. This is purely based on the project requirements

26) spring mvc flow

27)BindingResult holds the result of a validation and binding and contains errors that may have occurred.

28) how many ways we can create object in java.